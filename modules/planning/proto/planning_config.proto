syntax = "proto2";

package apollo.planning;

import "modules/planning/proto/dp_poly_path_config.proto";
import "modules/planning/proto/dp_st_speed_config.proto";
import "modules/planning/proto/qp_spline_path_config.proto";
import "modules/planning/proto/qp_st_speed_config.proto";
import "modules/planning/proto/proceed_with_caution_speed_config.proto";
import "modules/planning/proto/poly_st_speed_config.proto";
import "modules/planning/proto/navi_path_decider_config.proto";
import "modules/planning/proto/navi_speed_decider_config.proto";
import "modules/planning/proto/navi_obstacle_decider_config.proto";

enum TaskType {
  DP_POLY_PATH_OPTIMIZER = 0;
  DP_ST_SPEED_OPTIMIZER = 1;
  QP_SPLINE_PATH_OPTIMIZER = 2;
  QP_SPLINE_ST_SPEED_OPTIMIZER = 3;
  PATH_DECIDER = 4;
  SPEED_DECIDER = 5;
  POLY_ST_SPEED_OPTIMIZER = 6;
  NAVI_PATH_DECIDER = 7;
  NAVI_SPEED_DECIDER = 8;
  NAVI_OBSTACLE_DECIDER = 9;
};

message PathDeciderConfig {
  // place holder
}

message ScenarioConfig {
  enum ScenarioType {
    LANE_FOLLOW = 0;  // default scenario
    CHANGE_LANE = 1;
    SIDE_PASS = 2;  // go around an object when it blocks the road
    APPROACH = 3;   // approach to an intersection
    STOP_SIGN_PROTECTED = 4;
    STOP_SIGN_UNPROTECTED = 5;
    TRAFFIC_LIGHT_LEFT_TURN_PROTECTED = 6;
    TRAFFIC_LIGHT_LEFT_TURN_UNPROTECTED = 7;
    TRAFFIC_LIGHT_RIGHT_TURN_PROTECTED = 8;
    TRAFFIC_LIGHT_RIGHT_TURN_UNPROTECTED = 9;
    TRAFFIC_LIGHT_GO_THROUGH = 10;
  }
  message ScenarioTaskConfig {
    optional TaskType task_type = 1;
    oneof task_config {
      DpPolyPathConfig dp_poly_path_config = 2;
      DpStSpeedConfig dp_st_speed_config = 3;
      QpSplinePathConfig qp_spline_path_config = 4;
      QpStSpeedConfig qp_st_speed_config = 5;
      PolyStSpeedConfig poly_st_speed_config = 6;
      PathDeciderConfig path_decider_config = 7;
      ProceedWithCautionSpeedConfig proceed_with_caution_speed_config = 8;
    }
  }
  message Stage {
      optional string name = 1 [ default = "" ];
      repeated TaskType task = 2;
  };
  optional ScenarioType scenario_type = 1;
  repeated Stage stage = 2;
  repeated ScenarioTaskConfig scenario_task_config = 3;
}

message PlannerPublicRoadConfig {
  // supported scenario types
  repeated ScenarioConfig.ScenarioType scenario_type = 1;
}

message PlannerNaviConfig {
  repeated TaskType task = 1;
  optional NaviPathDeciderConfig navi_path_decider_config = 2;
  optional NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  optional NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
}

enum PlannerType {
  RTK = 0;
  PUBLIC_ROAD = 1;  // public road planner
  OPEN_SPACE = 2;   // open space planner
  NAVI = 3;         // navigation planner
  LATTICE = 4;      // lattice planner
}

message RtkPlanningConfig {
  optional PlannerType planner_type = 1;
}

message StandardPlanningConfig {
  repeated PlannerType planner_type = 1;  // supported planners
  optional PlannerPublicRoadConfig planner_public_road_config = 2;
}

message NavigationPlanningConfig {
  repeated PlannerType planner_type = 1;  // supported planners
  optional PlannerNaviConfig planner_navi_config = 4;
}

message PlanningConfig {
  oneof planning_config {
    RtkPlanningConfig rtk_planning_config = 1;
    StandardPlanningConfig standard_planning_config = 2;
    NavigationPlanningConfig navigation_planning_config = 3;
  }
}
