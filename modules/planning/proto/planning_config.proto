syntax = "proto2";

package apollo.planning;

import "modules/planning/proto/decider_config.proto";
import "modules/planning/proto/dp_poly_path_config.proto";
import "modules/planning/proto/dp_st_speed_config.proto";
import "modules/planning/proto/qp_piecewise_jerk_path_config.proto";
import "modules/planning/proto/qp_spline_path_config.proto";
import "modules/planning/proto/qp_st_speed_config.proto";
import "modules/planning/proto/proceed_with_caution_speed_config.proto";
import "modules/planning/proto/poly_st_speed_config.proto";
import "modules/planning/proto/navi_path_decider_config.proto";
import "modules/planning/proto/navi_speed_decider_config.proto";
import "modules/planning/proto/navi_obstacle_decider_config.proto";

message PathDeciderConfig {
  // place holder
}

// Planning's configuration is based on the following architecture
// * Scenario has one more multiple stages
// * a stage has one or

// tasks are shared among all scenarios and stages.
message TaskConfig {
   enum TaskType {
     DP_POLY_PATH_OPTIMIZER = 0;
     DP_ST_SPEED_OPTIMIZER = 1;
     QP_SPLINE_PATH_OPTIMIZER = 2;
     QP_SPLINE_ST_SPEED_OPTIMIZER = 3;
     PATH_DECIDER = 4;
     SPEED_DECIDER = 5;
     POLY_ST_SPEED_OPTIMIZER = 6;
     NAVI_PATH_DECIDER = 7;
     NAVI_SPEED_DECIDER = 8;
     NAVI_OBSTACLE_DECIDER = 9;
     QP_PIECEWISE_JERK_PATH_OPTIMIZER = 10;
     DECIDER_CREEP = 11;
     DECIDER_STOP_SIGN = 12;
   };
  optional TaskType task_type = 1;
  oneof task_config {
    DpPolyPathConfig dp_poly_path_config = 2;
    DpStSpeedConfig dp_st_speed_config = 3;
    QpSplinePathConfig qp_spline_path_config = 4;
    QpStSpeedConfig qp_st_speed_config = 5;
    PolyStSpeedConfig poly_st_speed_config = 6;
    PathDeciderConfig path_decider_config = 7;
    ProceedWithCautionSpeedConfig proceed_with_caution_speed_config = 8;
    QpPiecewiseJerkPathConfig qp_piecewise_jerk_path_config = 9;
    DeciderCreepConfig decider_creep_config = 10;
    DeciderStopSignConfig decider_stop_sign_config = 11;
  }
}


// scenario configs
message ScenarioConfig {
  enum ScenarioType {
    LANE_FOLLOW = 0;  // default scenario
    CHANGE_LANE = 1;
    SIDE_PASS = 2;  // go around an object when it blocks the road
    APPROACH = 3;   // approach to an intersection
    STOP_SIGN_PROTECTED = 4;
    STOP_SIGN_UNPROTECTED = 5;
    TRAFFIC_LIGHT_LEFT_TURN_PROTECTED = 6;
    TRAFFIC_LIGHT_LEFT_TURN_UNPROTECTED = 7;
    TRAFFIC_LIGHT_RIGHT_TURN_PROTECTED = 8;
    TRAFFIC_LIGHT_RIGHT_TURN_UNPROTECTED = 9;
    TRAFFIC_LIGHT_GO_THROUGH = 10;
  }

  optional ScenarioType scenario_type = 1;

  // StageType is a superset of stages from all scenarios.
  // It is created to keep different scenarios have uniform config interface
  enum StageType {
      NO_STAGE = 0;

      LANE_FOLLOW_DEFAULT_STAGE = 1;

      STOP_SIGN_UNPROTECTED_PRE_STOP = 100;
      STOP_SIGN_UNPROTECTED_STOP = 101;
      STOP_SIGN_UNPROTECTED_CREEP = 102 ;
      STOP_SIGN_UNPROTECTED_INTERSECTION_CRUISE = 103;

      SIDE_PASS_APPROACH_OBSTACLE = 200;
      SIDE_PASS_GENERATE_PATH= 201;
      SIDE_PASS_STOP_ON_WAITPOINT = 202;
      SIDE_PASS_DETECT_SAFETY = 203;
      SIDE_PASS_PASS_OBSTACLE = 204;
  };

  message StageConfig {
      optional StageType stage_type = 1;
      optional bool enabled = 2 [default=true];
      // an ordered list of tasks that are used at runtime. Its order determines the runtime order of the tasks.
      repeated TaskConfig.TaskType task_type = 3;
      // an unordered task configurations
      repeated TaskConfig task_config = 4;
  }

  // a list of stages that are used at runtime.  The first one is default stage.
  repeated StageType stage_type = 2;
  // an unordered list of stage configs.
  repeated StageConfig stage_config = 3;
}

message PlannerPublicRoadConfig {
  // supported scenario types
  repeated ScenarioConfig.ScenarioType scenario_type = 1;
}

message PlannerNaviConfig {
  repeated TaskConfig.TaskType task = 1;
  optional NaviPathDeciderConfig navi_path_decider_config = 2;
  optional NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  optional NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
}

enum PlannerType {
  RTK = 0;
  PUBLIC_ROAD = 1;  // public road planner
  OPEN_SPACE = 2;   // open space planner
  NAVI = 3;         // navigation planner
  LATTICE = 4;      // lattice planner
}

message RtkPlanningConfig {
  optional PlannerType planner_type = 1;
}

message StandardPlanningConfig {
  repeated PlannerType planner_type = 1;  // supported planners
  optional PlannerPublicRoadConfig planner_public_road_config = 2;
}

message NavigationPlanningConfig {
  repeated PlannerType planner_type = 1;  // supported planners
  optional PlannerNaviConfig planner_navi_config = 4;
}

message PlanningConfig {
  oneof planning_config {
    RtkPlanningConfig rtk_planning_config = 1;
    StandardPlanningConfig standard_planning_config = 2;
    NavigationPlanningConfig navigation_planning_config = 3;
  }

  // default task config, it will be used if there is no scenario-specific
  // task config.
  repeated TaskConfig default_task_config = 4;
}
