syntax = "proto2";

package apollo.dreamview;

enum HMIAction {
  NONE = 0;
  SETUP = 1;
  AUTO_MODE = 2;
  DISENGAGE = 3;
}

message Component {
  optional string display_name = 1;
  // If the path is given, HMI will check if it's available.
  optional string path = 2;

  message Command {
    // Command to be executed for debugging purpose.
    optional string debug_cmd = 1;

    // Command to be executed for production, which could be more robust with
    // recovery mechanism such as supervisor tool.
    // HMI will fallback to the debug command if it's not provided.
    optional string prod_cmd = 2;
  }
  map<string, Command> commands = 3;
}

message Launch {
  // Major Cyber components are configured in the launch file.
  optional string path = 1;
  // Addtional components besides those in launch file, such as data recorder.
  repeated string additional_modules = 2;
}

message Mode {
  // Modules are now bound to Launch.additional_modules.
  repeated string live_modules = 1 [deprecated = true];
  repeated string live_hardware = 2;

  // TODO(xiaoxq): Migrate to Cyber.
  optional string path = 3;  // /apollo/modules/calibration/modes/<name>.
  map<string, Launch> launches = 4;  // {launch_name: launch_conf}
}

message HMIConfig {
  optional string docker_image = 1;
  map<string, Component> modules = 2;          // {module_name: module}
  map<string, Component> hardware = 3;         // {hardware_name: hardware}
  map<string, Component> tools = 4;            // {tool_name: tool}
  map<string, string> available_maps = 5;      // {map_name: map_dir}
  map<string, string> available_vehicles = 6;  // {vehicle_name: vehicle_dir}
  map<string, Mode> modes = 7;                 // {mode_name: mode_config}
  optional int32 utm_zone_id = 8;              // FLAGS_local_utm_zone_id
  optional HMIAction chassis_high_beam_action = 10;

  reserved 9;
}

message VehicleData {
  // Upon switching vehicle, we need to copy source data to the dest path to
  // make it in effect.
  message DataFile {
    // Source path is a path relative to the vehicle data directory.
    optional string source_path = 1;
    // Dest path is where the data file could become in effect. It is allowed to
    // contain patterns such as "<ros>" which are able to finalize by
    // apollo::common::util::TranslatePath().
    optional string dest_path = 2;
  }
  repeated DataFile data_files = 1;
}
