syntax = "proto2";

package apollo.data;

import "cyber/proto/record.proto";
import "modules/common/proto/drive_event.proto";
import "modules/common/proto/geometry.proto";
import "modules/dreamview/proto/hmi_status.proto";

// Rich metadata for a Cyber record, which contains useful information for
// warehousing needs.
message Record {
  // Unique ID to identify record. Generally it's useful to be sortable. So
  // we'll use <start time>_<file_size>.
  optional string id = 1;

  // The input record to generate this proto.
  optional string path = 2;

  // Get from RecordReader.get_headerstring(). Some useful fields are:
  //   header.begin_time
  //   header.end_time
  //   header.size
  optional apollo.cyber.proto.Header header = 3;
  // Get from RecordReader.get_channellist() and get_messagenumber().
  map<string, uint64> channels = 4;

  // Get from the first hmi_status message.  Some useful fields are:
  //   hmi_status.current_mode
  //   hmi_status.current_map
  //   hmi_status.current_vehicle
  optional apollo.dreamview.HMIStatus hmi_status = 5;

  // A disengagement is counted when DrivingMode changes from AUTO to EMERGENCY.
  message Disengagement {
    optional double time = 1;
    optional apollo.common.PointLLH location = 2;
    optional string desc = 3;
  }
  repeated Disengagement disengagements = 6;

  // DriveEvent is an incident recorded by CarOps.
  repeated apollo.common.DriveEvent drive_events = 7;

  message Stat {
    // Mileage stat by driving mode: {canbus.Chassis.DrivingMode : miles}.
    map<string, float> mileages = 1;

    // A downsampled position point list which forms a driving path.
    repeated apollo.common.PointLLH driving_path = 2;
  }
  optional Stat stat = 8;
}
