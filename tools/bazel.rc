# +------------------------------------------------------------+
# | Startup Options                                            |
# +------------------------------------------------------------+
startup --batch_cpu_scheduling

startup --host_jvm_args=-XX:-UseParallelGC

# +------------------------------------------------------------+
# | Test Configurations                                        |
# +------------------------------------------------------------+

# By default prints output only from failed tests.
test --test_output=errors

# Work around the sandbox issue.
test --spawn_strategy=standalone

# Specify protobuf cc toolchain
test --proto_toolchain_for_cc="@com_google_protobuf//:cc_toolchain"

# +------------------------------------------------------------+
# | CPP Lint Tests & Unit Tests                                |
# +------------------------------------------------------------+
# By default, cpplint tests are run as part of `bazel test` alongside all of
# the other compilation and test targets.  This is a convenience shortcut to
# only do the cpplint testing and nothing else.
# Do bazel test --config=cpplint <target> to enable this configuration.
# To enable the lint test, the BUILD *must* load the cpplint.bzl by having
# 'load("//tools:cpplint.bzl", "cpplint")' at the beginning and 'cpplint()'
# at the end.
test:cpplint --test_tag_filters=cpplint
test:cpplint --build_tests_only

# Regular unit tests.
test:unit_test --test_tag_filters=-cpplint

# Coverage tests
test:coverage --test_tag_filters=-cpplint
test:coverage --copt=--coverage
test:coverage --cxxopt=--coverage
test:coverage --cxxopt=-fprofile-arcs
test:coverage --cxxopt=-ftest-coverage
test:coverage --linkopt=-coverage
test:coverage --linkopt=-lgcov
test:coverage --linkopt=-lgcc
test:coverage --linkopt=-lc

# +------------------------------------------------------------+
# | Build Configurations                                       |
# +------------------------------------------------------------+
# Do not show warnings from external dependencies.
build --output_filter="^//"

build --show_timestamps

# Work around the sandbox issue.
build --spawn_strategy=standalone

# Specify protobuf cc toolchain
build --proto_toolchain_for_cc="@com_google_protobuf//:cc_toolchain"

# build with profiling
build:cpu_prof --linkopt=-lprofiler

build --copt="-Werror=sign-compare"
build --copt="-Werror=return-type"
build --copt="-Werror=reorder"
build --copt="-Werror=unused-variable"
build --copt="-Werror=unused-but-set-variable"
build --copt="-Werror=switch"

build --per_file_copt=^modules/.*\.cc,^cyber/.*\.cc@-Wconversion
# Strict check on cleared modules.
build --per_file_copt=\
^modules/calibration/.*\.cc,\
^modules/common/math/.*\.cc,\
^modules/common/util/.*\.cc,\
^modules/contrib/.*\.cc,\
^modules/control/.*\.cc,\
^modules/data/.*\.cc,\
^modules/dreamview/backend/hmi/.*\.cc,\
^modules/guardian/.*\.cc,\
^modules/map/.*\.cc,\
^modules/monitor/.*\.cc,\
^modules/perception/base/.*\.cc,\
^modules/perception/inference/.*\.cc,\
^modules/perception/lib/.*\.cc,\
^modules/perception/map/.*\.cc,\
^modules/perception/onboard/.*\.cc,\
^modules/planning/.*\.cc,\
^modules/third_party_perception/.*\.cc,\
^modules/tools/.*\.cc,\
^modules/transform/.*\.cc,\
^modules/v2x/.*\.cc,\
@-Werror=conversion

# Enable C++14
build --cxxopt="-std=c++1y"
# Enable colorful output of GCC
# build --cxxopt="-fdiagnostics-color=always"
